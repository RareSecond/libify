/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/~__root'
import { Route as TracksImport } from './routes/~tracks'
import { Route as PlaylistsImport } from './routes/~playlists'
import { Route as AlbumsImport } from './routes/~albums'
import { Route as IndexImport } from './routes/~index'
import { Route as PlaylistsIndexImport } from './routes/~playlists.index'
import { Route as AlbumsIndexImport } from './routes/~albums.index'
import { Route as PlaylistsIdImport } from './routes/~playlists.$id'
import { Route as AuthSuccessImport } from './routes/~auth/~success'
import { Route as AlbumsArtistAlbumImport } from './routes/~albums.$artist.$album'

// Create/Update Routes

const TracksRoute = TracksImport.update({
  id: '/tracks',
  path: '/tracks',
  getParentRoute: () => rootRoute,
} as any)

const PlaylistsRoute = PlaylistsImport.update({
  id: '/playlists',
  path: '/playlists',
  getParentRoute: () => rootRoute,
} as any)

const AlbumsRoute = AlbumsImport.update({
  id: '/albums',
  path: '/albums',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PlaylistsIndexRoute = PlaylistsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PlaylistsRoute,
} as any)

const AlbumsIndexRoute = AlbumsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AlbumsRoute,
} as any)

const PlaylistsIdRoute = PlaylistsIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => PlaylistsRoute,
} as any)

const AuthSuccessRoute = AuthSuccessImport.update({
  id: '/auth/success',
  path: '/auth/success',
  getParentRoute: () => rootRoute,
} as any)

const AlbumsArtistAlbumRoute = AlbumsArtistAlbumImport.update({
  id: '/$artist/$album',
  path: '/$artist/$album',
  getParentRoute: () => AlbumsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/albums': {
      id: '/albums'
      path: '/albums'
      fullPath: '/albums'
      preLoaderRoute: typeof AlbumsImport
      parentRoute: typeof rootRoute
    }
    '/playlists': {
      id: '/playlists'
      path: '/playlists'
      fullPath: '/playlists'
      preLoaderRoute: typeof PlaylistsImport
      parentRoute: typeof rootRoute
    }
    '/tracks': {
      id: '/tracks'
      path: '/tracks'
      fullPath: '/tracks'
      preLoaderRoute: typeof TracksImport
      parentRoute: typeof rootRoute
    }
    '/auth/success': {
      id: '/auth/success'
      path: '/auth/success'
      fullPath: '/auth/success'
      preLoaderRoute: typeof AuthSuccessImport
      parentRoute: typeof rootRoute
    }
    '/playlists/$id': {
      id: '/playlists/$id'
      path: '/$id'
      fullPath: '/playlists/$id'
      preLoaderRoute: typeof PlaylistsIdImport
      parentRoute: typeof PlaylistsImport
    }
    '/albums/': {
      id: '/albums/'
      path: '/'
      fullPath: '/albums/'
      preLoaderRoute: typeof AlbumsIndexImport
      parentRoute: typeof AlbumsImport
    }
    '/playlists/': {
      id: '/playlists/'
      path: '/'
      fullPath: '/playlists/'
      preLoaderRoute: typeof PlaylistsIndexImport
      parentRoute: typeof PlaylistsImport
    }
    '/albums/$artist/$album': {
      id: '/albums/$artist/$album'
      path: '/$artist/$album'
      fullPath: '/albums/$artist/$album'
      preLoaderRoute: typeof AlbumsArtistAlbumImport
      parentRoute: typeof AlbumsImport
    }
  }
}

// Create and export the route tree

interface AlbumsRouteChildren {
  AlbumsIndexRoute: typeof AlbumsIndexRoute
  AlbumsArtistAlbumRoute: typeof AlbumsArtistAlbumRoute
}

const AlbumsRouteChildren: AlbumsRouteChildren = {
  AlbumsIndexRoute: AlbumsIndexRoute,
  AlbumsArtistAlbumRoute: AlbumsArtistAlbumRoute,
}

const AlbumsRouteWithChildren =
  AlbumsRoute._addFileChildren(AlbumsRouteChildren)

interface PlaylistsRouteChildren {
  PlaylistsIdRoute: typeof PlaylistsIdRoute
  PlaylistsIndexRoute: typeof PlaylistsIndexRoute
}

const PlaylistsRouteChildren: PlaylistsRouteChildren = {
  PlaylistsIdRoute: PlaylistsIdRoute,
  PlaylistsIndexRoute: PlaylistsIndexRoute,
}

const PlaylistsRouteWithChildren = PlaylistsRoute._addFileChildren(
  PlaylistsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/albums': typeof AlbumsRouteWithChildren
  '/playlists': typeof PlaylistsRouteWithChildren
  '/tracks': typeof TracksRoute
  '/auth/success': typeof AuthSuccessRoute
  '/playlists/$id': typeof PlaylistsIdRoute
  '/albums/': typeof AlbumsIndexRoute
  '/playlists/': typeof PlaylistsIndexRoute
  '/albums/$artist/$album': typeof AlbumsArtistAlbumRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/tracks': typeof TracksRoute
  '/auth/success': typeof AuthSuccessRoute
  '/playlists/$id': typeof PlaylistsIdRoute
  '/albums': typeof AlbumsIndexRoute
  '/playlists': typeof PlaylistsIndexRoute
  '/albums/$artist/$album': typeof AlbumsArtistAlbumRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/albums': typeof AlbumsRouteWithChildren
  '/playlists': typeof PlaylistsRouteWithChildren
  '/tracks': typeof TracksRoute
  '/auth/success': typeof AuthSuccessRoute
  '/playlists/$id': typeof PlaylistsIdRoute
  '/albums/': typeof AlbumsIndexRoute
  '/playlists/': typeof PlaylistsIndexRoute
  '/albums/$artist/$album': typeof AlbumsArtistAlbumRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/albums'
    | '/playlists'
    | '/tracks'
    | '/auth/success'
    | '/playlists/$id'
    | '/albums/'
    | '/playlists/'
    | '/albums/$artist/$album'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/tracks'
    | '/auth/success'
    | '/playlists/$id'
    | '/albums'
    | '/playlists'
    | '/albums/$artist/$album'
  id:
    | '__root__'
    | '/'
    | '/albums'
    | '/playlists'
    | '/tracks'
    | '/auth/success'
    | '/playlists/$id'
    | '/albums/'
    | '/playlists/'
    | '/albums/$artist/$album'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AlbumsRoute: typeof AlbumsRouteWithChildren
  PlaylistsRoute: typeof PlaylistsRouteWithChildren
  TracksRoute: typeof TracksRoute
  AuthSuccessRoute: typeof AuthSuccessRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AlbumsRoute: AlbumsRouteWithChildren,
  PlaylistsRoute: PlaylistsRouteWithChildren,
  TracksRoute: TracksRoute,
  AuthSuccessRoute: AuthSuccessRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "~__root.tsx",
      "children": [
        "/",
        "/albums",
        "/playlists",
        "/tracks",
        "/auth/success"
      ]
    },
    "/": {
      "filePath": "~index.tsx"
    },
    "/albums": {
      "filePath": "~albums.tsx",
      "children": [
        "/albums/",
        "/albums/$artist/$album"
      ]
    },
    "/playlists": {
      "filePath": "~playlists.tsx",
      "children": [
        "/playlists/$id",
        "/playlists/"
      ]
    },
    "/tracks": {
      "filePath": "~tracks.tsx"
    },
    "/auth/success": {
      "filePath": "~auth/~success.tsx"
    },
    "/playlists/$id": {
      "filePath": "~playlists.$id.tsx",
      "parent": "/playlists"
    },
    "/albums/": {
      "filePath": "~albums.index.tsx",
      "parent": "/albums"
    },
    "/playlists/": {
      "filePath": "~playlists.index.tsx",
      "parent": "/playlists"
    },
    "/albums/$artist/$album": {
      "filePath": "~albums.$artist.$album.tsx",
      "parent": "/albums"
    }
  }
}
ROUTE_MANIFEST_END */
